{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","SORT_FIELD_LIGHT","App","useState","None","sortField","setSortField","sortedLength","setSortedLength","isReversed","setIsReversed","visibleGoods","preparedGoods","Alphabetical","sort","good1","good2","localeCompare","Length","length","reverse","getPreparedGoods","className","type","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0DAfQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAmB,Y,SAEpBF,K,qBAAAA,E,gBAAAA,E,SAAAA,M,KAkCE,IAAMG,EAAM,WACjB,MAAkCC,mBAAmBJ,EAASK,MAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,mBAAmBJ,EAASK,MAApE,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAoCL,oBAAkB,GAAtD,mBAAOM,EAAP,KAAmBC,EAAnB,KAEMC,EAjCR,YAMa,IALTN,EAKQ,EALRA,UAAWE,EAKH,EALGA,aAAcE,EAKjB,EALiBA,WAMvBG,EAAa,UAAOZ,GAkBxB,OAhBIK,IAAcN,EAASc,eACzBD,EAAgB,YAAIA,GAAeE,MACjC,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,OAItCT,IAAiBR,EAASmB,SAC5BN,EAAgB,YAAIA,GAAeE,MACjC,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,WAIvCV,IACFG,EAAgB,YAAIA,GAAeQ,WAG9BR,EAQwBS,CAC7B,CAAEhB,YAAWE,eAAcE,eAG7B,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAyB,UAAdjB,EAAwB,iBAAxB,yBACWJ,GACtBuB,QAAS,WACPlB,EAAaP,EAASc,cACtBL,EAAgBT,EAASK,OAN7B,iCAYA,wBACEmB,KAAK,SACLD,UAA4B,WAAjBf,EAA4B,oBAA5B,4BACcN,GACzBuB,QAAS,WACPhB,EAAgBT,EAASmB,QACzBZ,EAAaP,EAASK,OAN1B,4BAYA,wBACEmB,KAAK,SACLD,UAAWb,EACP,oBADiB,4BAEIR,GACzBuB,QAAS,kBAAMd,GAAc,SAAAe,GAAI,OAAKA,MALxC,sBAUEpB,GAAaE,GAAgBE,IAC7B,wBACEc,KAAK,SACLD,UAAS,2BAAsBrB,GAC/BuB,QAAS,WACPlB,EAAaP,EAASK,MACtBI,EAAgBT,EAASK,MACzBM,GAAc,IANlB,sBAcJ,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCnHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2c9bfb9b.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_LIGHT = 'is-light';\n\nenum SortType {\n  Alphabetical = 'alpha',\n  Length = 'length',\n  None = '',\n}\n\nfunction getPreparedGoods(\n  { sortField, sortedLength, isReversed }: {\n    sortField: SortType,\n    sortedLength: SortType,\n    isReversed: boolean,\n  },\n): string[] {\n  let preparedGoods = [...goodsFromServer];\n\n  if (sortField === SortType.Alphabetical) {\n    preparedGoods = [...preparedGoods].sort(\n      (good1, good2) => good1.localeCompare(good2),\n    );\n  }\n\n  if (sortedLength === SortType.Length) {\n    preparedGoods = [...preparedGoods].sort(\n      (good1, good2) => good1.length - good2.length,\n    );\n  }\n\n  if (isReversed) {\n    preparedGoods = [...preparedGoods].reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.None);\n  const [sortedLength, setSortedLength] = useState<SortType>(SortType.None);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const visibleGoods: string[] = getPreparedGoods(\n    { sortField, sortedLength, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortField === 'alpha' ? 'button is-info'\n            : `button is-info ${SORT_FIELD_LIGHT}`}\n          onClick={() => {\n            setSortField(SortType.Alphabetical);\n            setSortedLength(SortType.None);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortedLength === 'length' ? 'button is-success'\n            : `button is-success ${SORT_FIELD_LIGHT}`}\n          onClick={() => {\n            setSortedLength(SortType.Length);\n            setSortField(SortType.None);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={isReversed\n            ? 'button is-warning'\n            : `button is-warning ${SORT_FIELD_LIGHT}`}\n          onClick={() => setIsReversed(prev => !prev)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || sortedLength || isReversed) && (\n          <button\n            type=\"button\"\n            className={`button is-danger ${SORT_FIELD_LIGHT}`}\n            onClick={() => {\n              setSortField(SortType.None);\n              setSortedLength(SortType.None);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}