{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","None","sortField","setSortField","isReversed","setIsReversed","visibleGoods","preparedGoods","Alphabetical","sort","good1","good2","localeCompare","Length","length","reverse","getPreparedGoods","handleSort","newSortField","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qBAAAA,E,gBAAAA,E,SAAAA,M,KAiCE,IAAME,EAAM,WACjB,MAAkCC,mBAAmBH,EAASI,MAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA/BR,YAKa,IAJTJ,EAIQ,EAJRA,UAAWE,EAIH,EAJGA,WAKTG,EAAa,UAAOT,GAkBxB,OAhBII,IAAcL,EAASW,eACzBD,EAAgB,YAAIA,GAAeE,MACjC,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,OAItCT,IAAcL,EAASgB,SACzBN,EAAgB,YAAIA,GAAeE,MACjC,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,WAIvCV,IACFG,EAAgB,YAAIA,GAAeQ,WAG9BR,EAOwBS,CAC7B,CAAEd,YAAWE,eAGTa,EAAa,SACjBC,GADiB,OAEd,kBAAMf,EAAae,KAOxB,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,WAAYnB,IAAcL,EAASW,eACvCc,QAASL,EAAWpB,EAASW,cAJ/B,iCASA,wBACEY,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYnB,IAAcL,EAASgB,SACvCS,QAASL,EAAWpB,EAASgB,QAJ/B,4BASA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,YAAajB,IACjBkB,QAAS,kBAAMjB,GAAc,SAAAkB,GAAI,OAAKA,MAJxC,sBASErB,GAAaE,IACb,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAvCU,WAClBnB,EAAaN,EAASI,MACtBI,GAAc,IAkCR,sBAUJ,6BACGC,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC9GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.31e0962d.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetical = 'alpha',\n  Length = 'length',\n  None = '',\n}\n\nfunction getPreparedGoods(\n  { sortField, isReversed }: {\n    sortField: SortType,\n    isReversed: boolean,\n  },\n): string[] {\n  let preparedGoods = [...goodsFromServer];\n\n  if (sortField === SortType.Alphabetical) {\n    preparedGoods = [...preparedGoods].sort(\n      (good1, good2) => good1.localeCompare(good2),\n    );\n  }\n\n  if (sortField === SortType.Length) {\n    preparedGoods = [...preparedGoods].sort(\n      (good1, good2) => good1.length - good2.length,\n    );\n  }\n\n  if (isReversed) {\n    preparedGoods = [...preparedGoods].reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.None);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const visibleGoods: string[] = getPreparedGoods(\n    { sortField, isReversed },\n  );\n\n  const handleSort = (\n    newSortField: SortType,\n  ) => () => setSortField(newSortField);\n\n  const handleReset = () => {\n    setSortField(SortType.None);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SortType.Alphabetical })}\n          onClick={handleSort(SortType.Alphabetical)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SortType.Length })}\n          onClick={handleSort(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !isReversed })}\n          onClick={() => setIsReversed(prev => !prev)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}